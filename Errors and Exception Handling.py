# Обработка ошибок и исключений

# try и except

# Синтаксис для обработки ошибок в Python - это команды try и except.
# Код, который может вызвать исключение, помещается в блок try.
# И обработка исключения реализуется в блоке except. Синтаксис следующий:
# try:
#    Здесь мы выполняем наши действия...
#    ...
# except ExceptionI:
#    Если случается исключение ExceptionI, то выполняем этот блок.
# except ExceptionII:
#    Если случается исключение ExceptionII, то выполняем этот блок.
#    ...
# else:
#    Если исключений нет, то выполняем этот блок.

# Пример:
try:
    f = open('testfile', 'w') # если попробовать открыть файл в режиме чтения 'r', то на экран будет выведено сообщение:
# Ошибка: не получилось найти файл или прочитать данные
    f.write('Пишем строку для проверки')
except IOError:
    # Здесь мы обрабатываем только исключение IOError, и выполняем команду print
    print("Ошибка: не получилось найти файл или прочитать данные")
else:
    print("Запись выполнена успешно")
    f.close()

# Мы также можем просто написать except:, если не знаем точно, какое исключение может возникнуть.
try:
    f = open('testfile', 'r')
    f.write('Пишем строку для проверки')
except:
    # Здесь мы обрабатываем любое исключение, и выполняем команду print
    print("Ошибка: не получилось найти файл или прочитать данные")
else:
    print("Запись выполнена успешно")
    f.close()
# Вывод: Ошибка: не получилось найти файл или прочитать данные

# Если мы хотим выполнить какой-то код после обработки исключения, то для этой цели можно использовать finally.

# finally

# Блок кода finally: выполняется всегда, вне зависимости от того, возникало или нет какое-либо исключение в блоке try.
# Синтаксис следующий:
# try:
#    Блок кода
#    ...
#    В случае исключений, этот код может быть пропущен!
# finally:
#    Этот блок кода всегда выполняется.

#Например:
try:
    f = open("testfile", "w")
    f.write("Выполняем запись")
    f.close()
finally:
    print("Всегда выполняем блок кода finally")
# Вывод: Всегда выполняем блок кода finally

# Мы можем использовать этот код в сочетании с except.
def askint():
    try:
        val = int(input("Введите число: "))
    except:
        print("Кажется, что Вы ввели не число!")

    finally:
        print("Выполняем блок finally!")
    print(val)


# При попытке ввести не число мы получим ошибку во время вывода на экран переменной val (потому что она не была создана)
# Давайте обработаем эту ситуацию, и попросим пользователя всё-таки ввести число:

def askint():
    try:
        val = int(input("Введите число: "))
    except:
        print("Кажется, что Вы ввели не число!")
        val = int(input("Попробуйте ещё - введите число: "))
    finally:
        print("Выполняем блок finally!")
    print(val)

# Эта функцияя тоже может выдать ошибку. Если ввести НЕ число два раза подряд
# Можно попробовать добавить цикл while

def askint():
    while True:
        try:
            val = int(input("Введите число: "))
        except:
            print("Кажется, что Вы ввели не число!")
            continue
        else:
            print("Да, это число!")
            break
        finally:
            print("Выполняем блок finally!")
        print(val)

# Теперь можно вводить не число сколько угодно раз и ошибки не будет.
# Программа закончится только тогда когда будет введено число

# Важное замечание:
# Для конструкций try/except/finally, любая команда continue или break выполняется после выполнения всей конструкции try/except/finally.

# Второй вариант последней функции
# print(val) был перенесён в блок else и будет выполнен только тогда, когда введено число

def askint():
    while True:
        try:
            val = int(input("Введите число: "))
        except:
            print("Кажется, что Вы ввели не число!")
            continue
        else:
            print("Да, это число!")
            print(val)
            break
        finally:
            print("Выполняем блок finally!")

askint()