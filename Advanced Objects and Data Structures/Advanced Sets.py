# Множества (Sets) - Дополнительные Материалы

s = set()

# add

# Добавляет элементы в множество. Помните, что в множестве нет дублирующихся элементов;
# каждый элемент содержится только один раз (поэтому это и называется множество!)
s.add(1)
s.add(2)
print(s)  # {1, 2}

# clear

# Удаляет все элементы из множества
s.clear()
print(s)  # set()

# copy

# Возвращает копию множества. Поскольку это копия, то изменения в первоначальное множество не влияют на копию.
s = {1, 2, 3}
sc = s.copy()
print(sc)  # {1, 2, 3}
print(s)  # {1, 2, 3}
s.add(4)
print(s)  # {1, 2, 3, 4}
print(sc)  # {1, 2, 3}

# difference и difference_update

# Возвращает разницу между двумя или более множествами. Синтаксис следующий:
# set1.difference(set2)
# Например:
s.difference(sc)  # {4}

# difference_update имеет следующий синтаксис:
# set1.difference_update(set2)
# метод вносит изменения в множество set1 после удаления элементов, найденных в множестве set2
s1 = {1, 2, 3}
s2 = {1, 4, 5}
s1.difference_update(s2)
print(s1)  # {2, 3}

# discard

# Удаляет элемент из множества, если он там содержится.
# Если не содержится, то ничего не делает (это не приводит к ошибке).
print(s)  # {1, 2, 3, 4}
s.discard(2)
print(s)  # {1, 3, 4}

# intersection и intersection_update

# Возвращает пересечение двух или более множеств в виде нового множества.
# То есть, элементы, которые содержатся во всех множествах.
s1 = {1, 2, 3}
s2 = {1, 2, 4}
s1.intersection(s2)  # {1, 2}
print(s1)  # {1, 2, 3}

# intersection_update вносит изменения в исходное множество -
# оставляет во множестве только его пересечение с другим множеством.
s1.intersection_update(s2)
print(s1)  # {1, 2}

# isdisjoint

# Этот метод возвращает True, если два множества имеют нулевое пересечение.
s1 = {1, 2}
s2 = {1, 2, 4}
s3 = {5}
s1.isdisjoint(s2)  # False
s1.isdisjoint(s3)  # True

# issubset и issuperset

# Метод issubset, является ли наше множество подмножеством другого множества
# (или, другими словами, содержит ли другое множество наше множество).
print(s1)  # {1, 2}
print(s2)  # {1, 2, 4}
s1.issubset(s2)  # True

# Метод issuperset говорит, содержит ли наше множество другое множество.
s2.issuperset(s1)  # True
s1.issuperset(s2)  # False

# symmetric_difference и symmetric_update

# Возвращает симметричную разницу двух множеств в виде нового множества.
# То есть, все элементы, которые содержатся только в одном из множеств.
s1 = {1, 2}
s2 = {1, 2, 4}
s1.symmetric_difference(s2)  # {4}

# union

# Возвращает объединение двух множеств (то есть, все элементы, которые содержатся хотя бы в одном из множеств).
s1.union(s2)  # {1, 2, 4}

# update

# Заменяет множество на его объединение с другими множествами.
s1.update(s2)
print(s1)  # {1, 2, 4}
