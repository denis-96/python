# Строки - Дополнительные Материалы

s = 'hello world'

# Изменение регистра

# сделать заглавными первые буквы каждого слова в строке
s.capitalize()  # 'Hello world'
# поменять регистр
s.upper()  # 'HELLO WORLD'
s.lower()  # 'hello world'
# Методы выше не меняют саму строку, вместо этого они создают копии исходной строки.
# Чтобы поменять саму строку, нужно заново присвоить ей новое значение:
s = s.upper()  # 'HELLO WORLD'
s = s.lower()  # 'hello world'

# Вхождение подстроки и подсчёт

s.count('o') # возвращает количество раз, сколько встретилась подстрока в строке, без пересечений # 2
s.find('o') # возвращает начальную позицию первого вхождения подстроки в строке # 4

# Форматирование

# Метод center() позволяет поместить строку 'в центре' между указанными строками определенной длины.
s.center(20, 'z')  # 'zzzzhello worldzzzzz'
# Метод expandtabs() развертывает нотации табуляции \t в пробелы:
'hello\thi'.expandtabs()  # 'hello   hi'

# Методы проверки "is..."

# Эти методы проверяют различные свойства строки.
s = 'hello'
# isalnum() возвращает True, если все символы в s являются алфавитно-числовыми
s.isalnum()  # True
# isalpha() возвращает True, если все символы в s являются алфавитными
s.isalpha()  # True
# islower() возвращает True, если все символы-буквы в s написаны в нижнем регистре, и в s есть хотя бы одна буква, иначе False.
s.islower()  # True
# isspace() возвращает True, если все символы в s являются пробельными.
s.isspace()  # False
# istitle() возвращает True, если в s есть хотя бы одна буква, и регистр букв построен по принципу заголовка,
# то есть первая буква в каждом слове заглавная, а остальные буквы прописные. Во всех других случаях возвращает False.
s.istitle()  # False
# isupper() возвращает True, если все буквы в s имеют верхний регистр, и в строке есть хотя бы одна буква, Иначе False.
s.isupper()  # False
# Метод endswith() проверяет окончание строки, это по сути то же самое, что и проверка для s[-1]
s.endswith('o')  # True

# Встроенные регулярные выражения

# Строки имеют встроенные методы, похожие на операции с регулярными выражениями.
# Мы можем использовать split(), чтобы разбить строку по определенному элементу, и вернуть список результатов.
# Также мы можем использовать partition(), чтобы получить кортеж с первым вхождением указанной подстроки,
# с указанием частей до и после этой подстроки.
s.split('e')  # ['h', 'llo']
s.partition('l')  # ('he', 'l', 'lo')
