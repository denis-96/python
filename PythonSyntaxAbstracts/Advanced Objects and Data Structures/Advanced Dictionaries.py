# Словари - Дополнительные Материалы

# Генераторы словарей (Dictionary Comprehensions)

# Как и для генераторов списков, для быстрого создания словарей есть своя версия генераторов
# (это сложный для перевода термин, по-английски это comprehension). Синтаксис следующий:
my_dict = {x: x**2 for x in range(10)}
print(my_dict)  # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}
# Одна из причин, по которой этот синтаксис не очень часто используется,
# это сложность в создании ключей, которые не основаны на значениях.
# Более сложный примерЖ
my_dict1 = {k: v for k, v in zip('abcde', range(5))}
print(my_dict1)  # {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4}
my_dict2 = {k: v for k, v in enumerate('abcde')}
print(my_dict2)  # {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e'}

# Итерации по ключам, значениям и элементам

# Для словарей можно выполнять итерации с помощью методов keys(), values() и items(). Например:
d = {'k1': 1, 'k2': 2}
for k in d.keys():
    print(k)
# k1
# k2

for v in d.values():
    print(v)
# 1
# 2
for item in d.items():
    print(item)
# ('k1', 1)
# ('k2', 2)

# Просмотр ключей, значений и элементов

# Сами по себе методы keys(), values() и items() возвращают объект словаря view object.
# Это не отдельный список элементов. Представление (view) всегда связано с самим словарём.
key_view = d.keys()
print(key_view)  # dict_keys(['k1', 'k2'])
d['k3'] = 3
print(d)  # {'k1': 1, 'k2': 2, 'k3': 3}
print(key_view)  # dict_keys(['k1', 'k2', 'k3'])
